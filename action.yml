name: 'Invalidate AWS CloudFront Distribution'
description: 'Invalidate AWS CloudFront Distribution'
author: 'Rick Meneely <rick@devopspolis.com>'
branding:
  icon: cloud-rain
  color: purple

inputs:
  distribution-id:
    description: CloudFront Distribution ID
    type: string
    required: true
  paths:
    description: CloudFront Invalidation Paths (space-separated, e.g., "/* /index.html /css/*")
    type: string
    required: false
    default: '/*'
  role:
    description: AWS role to assume (ARN or short name)
    type: string
    required: false
  wait-for-completion:
    description: Wait for invalidation to complete
    type: boolean
    required: false
    default: false
  caller-reference:
    description: Custom caller reference for the invalidation
    type: string
    required: false
  dry-run:
    description: Validate inputs and permissions without creating invalidation
    type: boolean
    required: false
    default: false
  retry-attempts:
    description: Number of retry attempts for AWS API calls (1-10)
    type: string
    required: false
    default: '3'
  mask-sensitive-info:
    description: Mask sensitive information in logs
    type: boolean
    required: false
    default: false
  aws-region:
    description: AWS region for CloudFront operations (falls back to AWS_REGION, AWS_DEFAULT_REGION, then us-east-1)
    type: string
    required: false

outputs:
  invalidation-id:
    description: The Invalidation ID
    value: ${{ steps.invalidate.outputs.invalidation_id }}
  invalidation-status:
    description: The Invalidation Status
    value: ${{ steps.invalidate.outputs.invalidation_status }}
  invalidation-create-time:
    description: The Invalidation Creation Time
    value: ${{ steps.invalidate.outputs.invalidation_create_time }}
  dry-run-status:
    description: Status of dry run validation (if dry-run was enabled)
    value: ${{ steps.verify-aws-credentials.outputs.dry_run_status }}
  final-status:
    description: Final invalidation status after completion wait
    value: ${{ steps.wait-completion.outputs.final_status }}

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "üîç Validating inputs..."

        # Validate distribution ID format
        distribution_id="${{ inputs.distribution-id }}"
        if [[ ! "$distribution_id" =~ ^[A-Za-z0-9]{14}$ ]]; then
          echo "‚ùå Invalid distribution ID format. Expected 14 alphanumeric characters, got: $distribution_id"
          exit 1
        fi

        # Validate paths format - handle paths properly without shell expansion
        paths="${{ inputs.paths }}"
        
        # Use printf to avoid shell expansion issues
        printf '%s\0' $paths | while IFS= read -r -d '' path; do
          if [[ ! "$path" =~ ^/.* ]]; then
            echo "‚ùå Invalid path format: '$path'. All paths must start with '/'"
            exit 1
          fi
          
          # Validate path length (CloudFront limit)
          if [[ ${#path} -gt 1024 ]]; then
            echo "‚ùå Path too long: '$path'. Maximum length is 1024 characters."
            exit 1
          fi
        done
        
        # Count paths using array to avoid expansion
        declare -a path_array
        read -ra path_array <<< "$paths"
        path_count=${#path_array[@]}
        
        if [[ $path_count -gt 1000 ]]; then
          echo "‚ùå Too many paths specified ($path_count). CloudFront supports maximum 1000 paths per invalidation."
          exit 1
        fi
        
        # Validate retry attempts
        retry_attempts="${{ inputs.retry-attempts }}"
        if [[ ! "$retry_attempts" =~ ^[0-9]+$ ]] || [[ $retry_attempts -lt 1 ]] || [[ $retry_attempts -gt 10 ]]; then
          echo "‚ùå Invalid retry-attempts: '$retry_attempts'. Must be a number between 1 and 10."
          exit 1
        fi
        
        # Polling interval is hardcoded to 30 seconds (optimal for CloudFront invalidations)

        echo "‚úÖ Input validation passed"
        if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
          echo "   Distribution ID: [MASKED]"
          echo "   Paths: [MASKED]"
        else
          echo "   Distribution ID: $distribution_id"
          echo "   Paths: $paths"
        fi
        echo "   Path count: $path_count"
        echo "   Retry attempts: $retry_attempts"
        echo "   Polling interval: 30 seconds (fixed)"
        echo "   Dry run: ${{ inputs.dry-run }}"

    - name: Verify required tools
      shell: bash
      run: |
        echo "üîç Verifying required tools..."

        if ! command -v jq &> /dev/null; then
          echo "‚ùå jq is not available. This should not happen on GitHub runners."
          exit 1
        fi

        if ! command -v aws &> /dev/null; then
          echo "‚ùå AWS CLI is not available. Please ensure AWS CLI is installed."
          exit 1
        fi

        echo "‚úÖ All required tools are available"
        echo "   jq version: $(jq --version)"
        echo "   AWS CLI version: $(aws --version)"

    - name: Resolve role ARN if provided
      if: ${{ inputs.role }}
      id: resolve-role
      shell: bash
      run: |
        role="${{ inputs.role }}"
        
        # Validate role ARN format if provided
        if [[ "$role" =~ ^arn:aws:iam:: ]]; then
          if [[ ! "$role" =~ ^arn:aws:iam::[0-9]{12}:role/[A-Za-z0-9+=,.@_-]+$ ]]; then
            echo "‚ùå Invalid role ARN format: $role"
            exit 1
          fi
          echo "‚úÖ Using provided role ARN: $role"
        else
          echo "üîç Resolving short role name to full ARN..."

          # Try to get AWS account ID from STS if not set
          if [[ -z "$AWS_ACCOUNT_ID" ]]; then
            echo "üîç AWS_ACCOUNT_ID not set, attempting to retrieve from STS..."
            if aws_account_id=$(aws sts get-caller-identity --query Account --output text 2>/dev/null); then
              echo "‚úÖ Retrieved AWS Account ID: $aws_account_id"
            else
              echo "‚ùå Could not retrieve AWS Account ID. Please set AWS_ACCOUNT_ID environment variable or provide full role ARN"
              exit 1
            fi
          else
            aws_account_id="$AWS_ACCOUNT_ID"
          fi

          # Validate short role name format
          if [[ ! "$role" =~ ^[A-Za-z0-9+=,.@_-]+$ ]]; then
            echo "‚ùå Invalid role name format: $role"
            exit 1
          fi
          
          role="arn:aws:iam::${aws_account_id}:role/$role"
        fi

        echo "role_arn=$role" >> $GITHUB_OUTPUT
        if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
          echo "‚úÖ Using role: [MASKED]"
        else
          echo "‚úÖ Using role: $role"
        fi

    - name: Configure AWS credentials
      if: ${{ inputs.role }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.resolve-role.outputs.role_arn }}
        aws-region: ${{ inputs.aws-region || env.AWS_REGION || env.AWS_DEFAULT_REGION || 'us-east-1' }}

    - name: Verify AWS credentials and permissions
      id: verify-aws-credentials
      shell: bash
      run: |
        echo "üîç Verifying AWS credentials..."

        if ! aws sts get-caller-identity > /dev/null 2>&1; then
          echo "‚ùå AWS credentials not configured or invalid"
          exit 1
        fi

        # Get current identity
        identity=$(aws sts get-caller-identity)
        echo "‚úÖ AWS credentials verified"
        echo "   Identity: $(echo "$identity" | jq -r '.Arn // .UserId')"

        # Test CloudFront permissions
        echo "üîç Testing CloudFront permissions..."
        distribution_id="${{ inputs.distribution-id }}"
        
        # Use retry logic for distribution access check
        retry_attempts="${{ inputs.retry-attempts }}"
        attempt=1
        while [[ $attempt -le $retry_attempts ]]; do
          if aws cloudfront get-distribution --id "$distribution_id" > /dev/null 2>&1; then
            echo "‚úÖ CloudFront access verified"
            break
          else
            echo "‚ö†Ô∏è  Failed to access distribution (attempt $attempt/$retry_attempts)"
            if [[ $attempt -eq $retry_attempts ]]; then
              echo "‚ùå Cannot access CloudFront distribution $distribution_id. Check permissions and distribution ID."
              exit 1
            fi
            sleep $((attempt * 2))  # Exponential backoff
            ((attempt++))
          fi
        done
        
        # Exit here if dry-run mode
        if [[ "${{ inputs.dry-run }}" == "true" ]]; then
          echo "üèÅ Dry run completed successfully. All validations passed."
          echo "   ‚úÖ Distribution access verified"
          echo "   ‚úÖ Paths validated"
          echo "   ‚úÖ Permissions confirmed"
          echo "dry_run_status=success" >> "$GITHUB_OUTPUT"
          exit 0
        fi

    - name: Invalidate CloudFront Distribution
      id: invalidate
      shell: bash
      run: |
        echo "üöÄ Starting CloudFront invalidation..."
        distribution_id="${{ inputs.distribution-id }}"
        paths="${{ inputs.paths }}"
        caller_ref="${{ inputs.caller-reference }}"
        
        if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
          echo "   Distribution: [MASKED]"
          echo "   Paths: [MASKED]"
        else
          echo "   Distribution: $distribution_id"
          echo "   Paths: $paths"
        fi
        
        if [[ -n "$caller_ref" ]]; then
          if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
            echo "   Caller Reference: [MASKED]"
          else
            echo "   Caller Reference: $caller_ref"
          fi
        fi

        # Execute invalidation with retry logic and proper quoting
        retry_attempts="${{ inputs.retry-attempts }}"
        attempt=1
        while [[ $attempt -le $retry_attempts ]]; do
          echo "Invalidation attempt $attempt/$retry_attempts..."
          
          # Build command safely without interpolation
          if [[ -n "$caller_ref" ]]; then
            invalidation_output=$(aws cloudfront create-invalidation \
              --distribution-id "$distribution_id" \
              --paths $paths \
              --caller-reference "$caller_ref" 2>&1)
          else
            invalidation_output=$(aws cloudfront create-invalidation \
              --distribution-id "$distribution_id" \
              --paths $paths 2>&1)
          fi
          
          if [[ $? -eq 0 ]]; then
            echo "‚úÖ Invalidation request successful"
            break
          else
            echo "‚ö†Ô∏è  Invalidation attempt $attempt failed"
            if [[ $attempt -eq $retry_attempts ]]; then
              echo "‚ùå Failed to create invalidation after $retry_attempts attempts:"
              # Filter sensitive information from error output
              if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
                echo "[ERROR OUTPUT MASKED]"
              else
                echo "$invalidation_output"
              fi
              exit 1
            fi
            sleep $((attempt * 2))  # Exponential backoff
            ((attempt++))
          fi
        done

        # Display output based on masking preference
        if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
          echo "Invalidation output: [MASKED]"
        else
          echo "$invalidation_output"
        fi

        # Extract invalidation details
        invalidation_id=$(echo "$invalidation_output" | jq -r '.Invalidation.Id // empty')
        invalidation_status=$(echo "$invalidation_output" | jq -r '.Invalidation.Status // empty')
        invalidation_create_time=$(echo "$invalidation_output" | jq -r '.Invalidation.CreateTime // empty')

        if [[ -z "$invalidation_id" ]]; then
          echo "‚ùå Failed to extract invalidation ID from response"
          exit 1
        fi

        echo "invalidation_id=$invalidation_id" >> "$GITHUB_OUTPUT"
        echo "invalidation_status=$invalidation_status" >> "$GITHUB_OUTPUT"
        echo "invalidation_create_time=$invalidation_create_time" >> "$GITHUB_OUTPUT"

        echo "üìã Invalidation Details:"
        echo "   ID: $invalidation_id"
        echo "   Status: $invalidation_status"
        echo "   Created: $invalidation_create_time"

    - name: Wait for invalidation completion
      id: wait-completion
      if: ${{ inputs.wait-for-completion == 'true' }}
      shell: bash
      run: |
        invalidation_id="${{ steps.invalidate.outputs.invalidation_id }}"
        distribution_id="${{ inputs.distribution-id }}"
        polling_interval=30  # Fixed 30-second polling interval
        
        if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
          echo "‚è≥ Waiting for invalidation [MASKED] to complete..."
        else
          echo "‚è≥ Waiting for invalidation $invalidation_id to complete..."
        fi
        
        # Calculate max attempts based on 30-second polling (max 30 minutes)
        max_wait_time=1800  # 30 minutes in seconds
        max_attempts=$((max_wait_time / polling_interval))  # 60 attempts
        attempt=0
        
        echo "Polling every $polling_interval seconds (max $max_attempts attempts)..."

        while [[ $attempt -lt $max_attempts ]]; do
          # Add retry logic for status checks
          retry_count=0
          max_retries=3
          
          while [[ $retry_count -lt $max_retries ]]; do
            if invalidation_status=$(aws cloudfront get-invalidation \
              --distribution-id "$distribution_id" \
              --id "$invalidation_id" \
              --query 'Invalidation.Status' \
              --output text 2>/dev/null); then
              break
            else
              ((retry_count++))
              if [[ $retry_count -lt $max_retries ]]; then
                echo "‚ö†Ô∏è  Failed to check status, retrying in 5 seconds..."
                sleep 5
              fi
            fi
          done
          
          if [[ $retry_count -eq $max_retries ]]; then
            echo "‚ö†Ô∏è  Failed to check invalidation status (attempt $((attempt + 1))/$max_attempts)"
          else
            echo "   Status: $invalidation_status (attempt $((attempt + 1))/$max_attempts)"
            
            if [[ "$invalidation_status" == "Completed" ]]; then
              echo "‚úÖ Invalidation completed successfully"
              echo "final_status=Completed" >> "$GITHUB_OUTPUT"
              break
            elif [[ "$invalidation_status" == "Failed" ]]; then
              echo "‚ùå Invalidation failed"
              echo "final_status=Failed" >> "$GITHUB_OUTPUT"
              exit 1
            fi
          fi

          sleep "$polling_interval"
          ((attempt++))
        done

        if [[ $attempt -eq $max_attempts ]]; then
          timeout_minutes=$((max_wait_time / 60))
          echo "‚ö†Ô∏è  Timeout waiting for invalidation to complete after $timeout_minutes minutes"
          echo "   The invalidation is still in progress and will complete eventually"
          echo "final_status=InProgress" >> "$GITHUB_OUTPUT"
        fi

    - name: Summary
      if: ${{ inputs.dry-run != 'true' }}
      shell: bash
      run: |
        echo "## üéâ CloudFront Invalidation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
          echo "- **Distribution ID:** [MASKED]" >> $GITHUB_STEP_SUMMARY
          echo "- **Invalidation ID:** [MASKED]" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Distribution ID:** ${{ inputs.distribution-id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Invalidation ID:** ${{ steps.invalidate.outputs.invalidation_id }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **Status:** ${{ steps.invalidate.outputs.invalidation_status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Created:** ${{ steps.invalidate.outputs.invalidation_create_time }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Retry Attempts:** ${{ inputs.retry-attempts }}" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.wait-for-completion }}" == "true" ]]; then
          echo "- **Final Status:** ${{ steps.wait-completion.outputs.final_status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Polling Interval:** 30 seconds" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ CloudFront invalidation completed successfully!" >> $GITHUB_STEP_SUMMARY

    - name: Dry Run Summary
      if: ${{ inputs.dry-run == 'true' }}
      shell: bash
      run: |
        echo "## üßë‚Äçüî¨ Dry Run Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Mode:** Validation Only (No Invalidation Created)" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.mask-sensitive-info }}" == "true" ]]; then
          echo "- **Distribution ID:** [MASKED]" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Distribution ID:** ${{ inputs.distribution-id }}" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **Validation Status:** ‚úÖ Passed" >> $GITHUB_STEP_SUMMARY
        echo "- **Permissions:** ‚úÖ Verified" >> $GITHUB_STEP_SUMMARY
        echo "- **Path Count:** Validated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üèÅ All validations passed! Ready for actual invalidation." >> $GITHUB_STEP_SUMMARY
