name: 'Invalidate AWS CloudFront Distribution'
description: 'Invalidate AWS CloudFront Distribution'
author: 'Rick Meneely <rick@devopspolis.com>'
branding:
  icon: cloud-rain
  color: purple

inputs:
  distribution-id:
    description: CloudFront Distribution ID
    type: string
    required: true
  paths:
    description: CloudFront Invalidation Paths (space-separated, e.g., "/* /index.html /css/*")
    type: string
    required: false
    default: '/*'
  role:
    description: AWS role to assume (ARN or short name)
    type: string
    required: false
  wait-for-completion:
    description: Wait for invalidation to complete
    type: boolean
    required: false
    default: false
  caller-reference:
    description: Custom caller reference for the invalidation
    type: string
    required: false

outputs:
  invalidation-id:
    description: The Invalidation ID
    value: ${{ steps.invalidate.outputs.invalidation_id }}
  invalidation-status:
    description: The Invalidation Status
    value: ${{ steps.invalidate.outputs.invalidation_status }}
  invalidation-create-time:
    description: The Invalidation Creation Time
    value: ${{ steps.invalidate.outputs.invalidation_create_time }}

runs:
  using: composite
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "üîç Validating inputs..."

        # Validate distribution ID format
        if [[ ! "${{ inputs.distribution-id }}" =~ ^[A-Z0-9]{14}$ ]]; then
          echo "‚ùå Invalid distribution ID format. Expected 14 alphanumeric characters, got: ${{ inputs.distribution-id }}"
          exit 1
        fi

        # Validate paths format
        paths="${{ inputs.paths }}"
        IFS=' ' read -ra path_array <<< "$paths"
        path_count=${#path_array[@]}

        if [[ $path_count -gt 1000 ]]; then
          echo "‚ùå Too many paths specified ($path_count). CloudFront supports maximum 1000 paths per invalidation."
          exit 1
        fi

        for path in "${path_array[@]}"; do
          if [[ ! "$path" =~ ^/.* ]]; then
            echo "‚ùå Invalid path format: '$path'. All paths must start with '/'"
            exit 1
          fi
        done

        echo "‚úÖ Input validation passed"
        echo "   Distribution ID: ${{ inputs.distribution-id }}"
        echo "   Paths: ${{ inputs.paths }}"
        echo "   Path count: $path_count"

    - name: Verify required tools
      shell: bash
      run: |
        echo "üîç Verifying required tools..."

        if ! command -v jq &> /dev/null; then
          echo "‚ùå jq is not available. This should not happen on GitHub runners."
          exit 1
        fi

        if ! command -v aws &> /dev/null; then
          echo "‚ùå AWS CLI is not available. Please ensure AWS CLI is installed."
          exit 1
        fi

        echo "‚úÖ All required tools are available"
        echo "   jq version: $(jq --version)"
        echo "   AWS CLI version: $(aws --version)"

    - name: Resolve role ARN if provided
      if: ${{ inputs.role }}
      id: resolve-role
      shell: bash
      run: |
        role="${{ inputs.role }}"

        # If it's not already an ARN, construct it
        if [[ "$role" != arn:aws:iam::* ]]; then
          echo "üîç Resolving short role name to full ARN..."

          # Try to get AWS account ID from STS if not set
          if [[ -z "$AWS_ACCOUNT_ID" ]]; then
            echo "üîç AWS_ACCOUNT_ID not set, attempting to retrieve from STS..."
            if aws_account_id=$(aws sts get-caller-identity --query Account --output text 2>/dev/null); then
              echo "‚úÖ Retrieved AWS Account ID: $aws_account_id"
            else
              echo "‚ùå Could not retrieve AWS Account ID. Please set AWS_ACCOUNT_ID environment variable or provide full role ARN"
              exit 1
            fi
          else
            aws_account_id="$AWS_ACCOUNT_ID"
          fi

          role="arn:aws:iam::${aws_account_id}:role/$role"
        fi

        echo "role_arn=$role" >> $GITHUB_OUTPUT
        echo "‚úÖ Using role: $role"

    - name: Configure AWS credentials
      if: ${{ inputs.role }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ steps.resolve-role.outputs.role_arn }}
        aws-region: ${{ env.AWS_REGION || env.AWS_DEFAULT_REGION || 'us-east-1' }}

    - name: Verify AWS credentials and permissions
      shell: bash
      run: |
        echo "üîç Verifying AWS credentials..."

        if ! aws sts get-caller-identity > /dev/null 2>&1; then
          echo "‚ùå AWS credentials not configured or invalid"
          exit 1
        fi

        # Get current identity
        identity=$(aws sts get-caller-identity)
        echo "‚úÖ AWS credentials verified"
        echo "   Identity: $(echo "$identity" | jq -r '.Arn // .UserId')"

        # Test CloudFront permissions
        echo "üîç Testing CloudFront permissions..."
        if ! aws cloudfront get-distribution --id "${{ inputs.distribution-id }}" > /dev/null 2>&1; then
          echo "‚ùå Cannot access CloudFront distribution ${{ inputs.distribution-id }}. Check permissions and distribution ID."
          exit 1
        fi

        echo "‚úÖ CloudFront access verified"

    - name: Invalidate CloudFront Distribution
      id: invalidate
      shell: bash
      run: |
        echo "üöÄ Starting CloudFront invalidation..."
        echo "   Distribution: ${{ inputs.distribution-id }}"
        echo "   Paths: ${{ inputs.paths }}"

        # Prepare invalidation command
        invalidation_cmd="aws cloudfront create-invalidation --distribution-id ${{ inputs.distribution-id }} --paths ${{ inputs.paths }}"

        # Add caller reference if provided
        if [[ -n "${{ inputs.caller-reference }}" ]]; then
          invalidation_cmd="$invalidation_cmd --caller-reference ${{ inputs.caller-reference }}"
          echo "   Caller Reference: ${{ inputs.caller-reference }}"
        fi

        # Execute invalidation
        if ! invalidation_output=$($invalidation_cmd 2>&1); then
          echo "‚ùå Failed to create invalidation:"
          echo "$invalidation_output"
          exit 1
        fi

        echo "‚úÖ Invalidation request successful"
        echo "$invalidation_output"

        # Extract invalidation details
        invalidation_id=$(echo "$invalidation_output" | jq -r '.Invalidation.Id // empty')
        invalidation_status=$(echo "$invalidation_output" | jq -r '.Invalidation.Status // empty')
        invalidation_create_time=$(echo "$invalidation_output" | jq -r '.Invalidation.CreateTime // empty')

        if [[ -z "$invalidation_id" ]]; then
          echo "‚ùå Failed to extract invalidation ID from response"
          exit 1
        fi

        echo "invalidation_id=$invalidation_id" >> "$GITHUB_OUTPUT"
        echo "invalidation_status=$invalidation_status" >> "$GITHUB_OUTPUT"
        echo "invalidation_create_time=$invalidation_create_time" >> "$GITHUB_OUTPUT"

        echo "üìã Invalidation Details:"
        echo "   ID: $invalidation_id"
        echo "   Status: $invalidation_status"
        echo "   Created: $invalidation_create_time"

    - name: Wait for invalidation completion
      if: ${{ inputs.wait-for-completion == 'true' }}
      shell: bash
      run: |
        invalidation_id="${{ steps.invalidate.outputs.invalidation_id }}"
        echo "‚è≥ Waiting for invalidation $invalidation_id to complete..."

        max_attempts=60  # 30 minutes with 30-second intervals
        attempt=0

        while [[ $attempt -lt $max_attempts ]]; do
          if invalidation_status=$(aws cloudfront get-invalidation \
            --distribution-id "${{ inputs.distribution-id }}" \
            --id "$invalidation_id" \
            --query 'Invalidation.Status' \
            --output text 2>/dev/null); then

            echo "   Status: $invalidation_status (attempt $((attempt + 1))/$max_attempts)"

            if [[ "$invalidation_status" == "Completed" ]]; then
              echo "‚úÖ Invalidation completed successfully"
              break
            elif [[ "$invalidation_status" == "Failed" ]]; then
              echo "‚ùå Invalidation failed"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  Failed to check invalidation status (attempt $((attempt + 1))/$max_attempts)"
          fi

          sleep 30
          ((attempt++))
        done

        if [[ $attempt -eq $max_attempts ]]; then
          echo "‚ö†Ô∏è  Timeout waiting for invalidation to complete after 30 minutes"
          echo "   The invalidation is still in progress and will complete eventually"
        fi
